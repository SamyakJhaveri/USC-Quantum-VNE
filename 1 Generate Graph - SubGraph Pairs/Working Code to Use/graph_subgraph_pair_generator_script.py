"""
Code to generate Graph-Subgraph pairs 

"""

"""
Features to Add:
- (done) A loop iterates i (nbumber of nodes in subgraph) over numbers from 3 to (n1 - 1) to generate graph-subgraph pairs, geenrate a name or that pair 
and use that name as the filename, and store that pair as a list of networkX graphs using pickle. 
- (done) turn this into a script
- (done) Could make a nested list of all the graph-subgraph pairs of a given main graph with n1 number of nodes. i.e. one pickle file that is essentially 
a list of all the graph-subgraph pairs that are possible for a certain n1 (number of nodes of main graph). So that for graphs with n1 = 5 to ???
 (My guess is to go till n1 = 20 for now and see how the algorithm performs)

"""

# Imports
import networkx as nx
import matplotlib.pyplot as plt
import random 
import pickle
import sys


def generate_random_parent_graph(n, p):
        """
        Generating Random Graphs using the Erdos-Renyi Model as 
        provided by the NetworkX library

        Erdos-Renyi model of random graph generation is the 
        most typicall example used in many graph isomorphism papers

        Reference to Zick's Paper:
        ``Simple undirected N -vertex graphs were constructed 
        according to the Erd ̋os-R ́enyi G (n, p) model 
        with n = N and with the probability p of including each 
        edge equal to 0.5. Non-isomorphic pairs were generated 
        by creating two graphs as above and checking for 
        non-isomorphism using the MATLAB graphisomorphism() 
        function. Isomorphic pairs were generated by generating 
        a single graph then applying a random permutation to 
        arrive at the second graph.`

        Args: 
        n: number of nodes in parent graph 
        p: probability of there being an edge betwen two nodes in the graph
        """

        G = nx.fast_gnp_random_graph(n, p, seed = None, directed = False)

        # Drawing Graph G1
        # pos = nx.spring_layout(G)
        # Commented for now to precent i tfrom interrupting the code to geenrate the graph-subgrpah pairs using the for loop
        # nx.draw(G, 
        #        pos = pos,
        #        with_labels = True, 
        #        node_color = "tab:blue")
        # plt.show()  
        return G


def generate_child_subgraph(G, n):
        """
        Generating the SubGraph from the Parent graph
        Args:
        G: Parent Graph
        n: number of nodes in SubGraph
        """

        n1 = G.number_of_nodes()

        # Graph.subgraph(nodes) # option 1
        # SG = G.subgraph(random.sample(list(G.nodes), n2)) # option 2
        """ This works for now. Try looking for a better way to generate SubGraphs """
        SG = G.subgraph(range((n1 - n), G.order())) # option 3

        # Drawing the Sub Graph
        # Commented for now to precent i tfrom interrupting the code to geenrate the graph-subgrpah pairs using the for loop
        # pos = nx.spring_layout(SG)
        # nx.draw(SG, 
        #        pos = pos,
        #        with_labels = True, 
        #        node_color = "tab:red")
        # plt.show()
        return SG


# def save_g_sg_pair(g_sg_pair_list, filename):
def save_g_sg_pair(g_sg_pair_list):
        """ 
        Function to Save one Graph - SubGraph Pair 
        
        Args:
        - g_sg_pair_list: Pair of Graph and its SubGraph in List form, 
                        (first element of list is Parent Graph, second element of list is SubGraph)
        - filename: Filename to be used to store the Graph-Subgraph pair as pickle
        """

        n1 = G.number_of_nodes()
        n2 = SG.number_of_nodes()
    
        filename = "G(" + str(n1) + ")_SG(" + str(n2) + ").pickle"

        try:
                with open(filename, "wb") as f:
                        pickle.dump(g_sg_pair_list, f, protocol = pickle.HIGHEST_PROTOCOL)
                        print("Stored Graph-SubGraph pair as :{}.".format(filename))
        except Exception as ex:
                print("Error during pickling object (Possibly unsupported).", ex)


def save_g_sg_pair_dict(filename, g_sg_pair_dict):
        """ 
        Function to Save the Graph - SubGraph Pair Dictionary
    
        Args:
        - g_sg_pair_dict: All the Pairs of Graph and its SubGraph in List form, 
                        stored inside a dictionary 
                        (first element of list is Parent Graph, second element of list is SubGraph)
        """

        try:
                with open(filename, "wb") as f:
                        pickle.dump(g_sg_pair_dict, f, protocol = pickle.HIGHEST_PROTOCOL)
                        print("Stored Graph-SubGraph pair Dictionary Dataset.")
        except Exception as ex:
                print("Error during pickling object (Possibly unsupported).", ex)


def load_g_sg_pair_from_file(filename):
    """ 
    Function to Load a Graph - SubGraph Pair from a given filename
    
    Args:
    - filename: Filename of the Graph-Subgraph pickle to be loaded from storage 
    """

    try: 
        with open(filename, "rb") as f:
                print("Loaded {} pickle file from storage.".format(filename))
                return pickle.load(f)
    except Exception as ex:
            print("Error during unpickling object (Possible unsupported).", ex)


def load_g_sg_pair_dictionary(filename):
    """ 
    Function to Load the Graph - SubGraph Pair Dictionary Dataset 
    
    Args:
    - filename: Filename of the Graph-Subgraph Dictionary Dataset pickle to be loaded from storage 
    """

    try: 
        with open(filename, "rb") as f:
                print("Loaded {} pickle file from storage.".format(filename))
                return pickle.load(f)
    except Exception as ex:
            print("Error during unpickling object (Possible unsupported).", ex)


def load_g_sg_pair_from_dictionary(key):
        """ 
        Function to Load a Graph - SubGraph Pair from the Dictionary Dataset 
    
        Args:
        - key: key of the Graph-Subgraph pair to be loaded from the Graph-Subgraph Dictionary Dataset
        """

        try: 
                with open(filename, "rb") as f:
                        print("Loaded {} pickle file from storage.".format(filename))
                        return pickle.load(f)
        except Exception as ex:
                print("Error during unpickling object (Possible unsupported).", ex)


def plot_graphs(g_sg_pair_list):
    """ 
    Plot graphs of two circuits 

    Args:
        - g_sg_pair_list: Pair of Graph and its SubGraph in List form
    """

    G = g_sg_pair_list[0]
    SG = g_sg_pair_list[1]
    
    f, axes = plt.subplots(1, 2, figsize = [10, 4.5])
    nx.draw(G, with_labels = True, ax = axes[0], node_color = "tab:blue")
    nx.draw(SG, with_labels = True, ax = axes[1], node_color = "tab:red")
    plt.show()


if __name__ == "__main__":
        """
        Version of the Code that hard-codes values like n1, n2 and p in the 'main' function of the script
        
        # Defining number of nodes and the probability of there being an edge
        # two nodes in the Larger/Main/Parent graph
        n1 = 10 # number of nodes in Parent Graph
        p = 0.5 # probability of edge creation between two nodes
        n2 = 6 # number of nodes in the subgraph
        """

        """
        Version of the code that takes values of n1, and n2 as command line arguments 
        and p is always kept as 0.5
        

        print("Enter the "
        "\n Number of nodes in Parent Graph (G) as the first command-line argument (n1), and"
        "\n Number of nodes in SubGraph (SG) as the second command-line arcgument(n2)")
        # p = 0.5
        # n1 = int(sys.argv[1])
        # n2 = int(sys.argv[2])

        # p is chosen to be 0.5 as per Zick's paper. 
        # G = generate_random_parent_graph(n1, p)
        # SG = generate_child_subgraph(G, n2) 

        # saving the Graph-SubGraph Pair
        # save_g_sg_pair([G, SG], filename)
        """

        # Retreiving the G-SG Pair
        # Commented out because this script is only for saving the graph pairs generated
        # plot_graphs(load_g_sg_pair(filename))


        """
        Version of the code that generates Graph-SubGraph pairs for 
        5 <= n1 <= 20, and 
        3 <= n2 <= 19
        (These ranges for n1 and n1 have been chosen arbitrarily and can be updated as required)
        
        p = 0.5
        n1 = 25
        n2 = n1 - 1 # 20 - 1 = 19
        g_sg_pair_dict = {} # dictionary to keep all the graph-subgraph pairs in one place. 
        # Will store only this one dictinoary instead of storing every graph-subgraph pair in 
        # a separate file that has to be stored and retreived everytime a new pair is 
        # generated which makes the whole process computationally heavy
        
        dataset_filepath = "/Users/samyakjhaveri/Desktop/Drive Folder/Research/USC Internship Quantum Virtual Network Embedding Project 2022/Dataset/G_SG_PAIR_DICTIONARY_DATASET.pickle"
        
        key = ""
        
        for i in range(5, n1 + 1):
                for j in range(3, n2 + 1):
                        G = generate_random_parent_graph(i, p)
                        SG = generate_child_subgraph(G, j)
                        # save_g_sg_pair([G, SG])
                        key = "G" + str(i) + "_SG" + str(j)
                        g_sg_pair_dict[key] = [G, SG]
        
        
        # Saving the Graph-SubGraph Pair Dataset in the designated directory
        save_g_sg_pair_dict(dataset_filepath, g_sg_pair_dict)

        print("\n DONE!")
        """
        
        # Loading the Graph-Subgraph pairs from the Dictionary
        filename = "/Users/samyakjhaveri/Desktop/Drive Folder/Research/USC Internship Quantum Virtual Network Embedding Project 2022/Dataset/G_SG_PAIR_DICTIONARY_DATASET.pickle"
        g_sg_pair_dict_loaded = load_g_sg_pair_dictionary(filename)
        print("Graph-SubGraph Pair Dictionary Dataset:")
        print(g_sg_pair_dict_loaded)
        # whatever key you want with the format: G<n1>_SG<n2>
        key = "G25_SG20"
        g_sg_pair_list = g_sg_pair_dict_loaded[key]
        print("Graph - SubGraph Pair:{}".format(g_sg_pair_list))
        plot_graphs(g_sg_pair_list)
        

"""
References: 
- passing multiple arguments via the command-line: https://www.geeksforgeeks.org/executing-functions-with-multiple-arguments-at-a-terminal-in-python/
"""